const toggleAttach = (e) => {
  // select the span with reliable identification like data-*
  const clipNode = document.querySelectorAll('.TbtXF')[e];
  // take its element, i.e. the button itself
  const clipButtonNode = clipNode.parentNode;
  // extract the current offset position relative to the document
  // more info here https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect
  // we can use this for filling in the non-0 screenX and screenY
  const clipButtonNodeClientRect = clipButtonNode.getBoundingClientRect();

  clipButtonNode.dispatchEvent(new MouseEvent("mousedown", {
    bubbles: true,
    cancelable: true,
    screenX: clipButtonNodeClientRect.x,
    screenY: clipButtonNodeClientRect.y
  }));
}
// users array index  
toggleAttach(5)

/*
const toggleAttach = (e) => {
  // select the span
  const clipNode = document.querySelectorAll('._35k-1')[e];
  // take its element, i.e. the button itself
  const clipButtonNode = clipNode.parentNode;
  // extract the current offset position relative to the document
  // more info here https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect
  // we can use this for filling in the non-0 screenX and screenY
  const clipButtonNodeClientRect = clipButtonNode.getBoundingClientRect();

  clipButtonNode.dispatchEvent(new MouseEvent("mousedown", {
    bubbles: true,
    cancelable: true,
    screenX: clipButtonNodeClientRect.x,
    screenY: clipButtonNodeClientRect.y
  }));
}
// click all user in chat 
for (var i = 0; i < document.querySelectorAll('._35k-1').length; i++) {
	  console.log('fakeClick: ', document.querySelectorAll('._35k-1')[i]);
toggleAttach(i)
	}
*/

/* version 2 */

const toggleAttach = (e) => {
  // select the span with reliable identification like data-*
  const clipNode = document.querySelectorAll('.TbtXF')[e];
  // take its element, i.e. the button itself
  const clipButtonNode = clipNode.parentNode;
  // extract the current offset position relative to the document
  // more info here https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect
  // we can use this for filling in the non-0 screenX and screenY
  const clipButtonNodeClientRect = clipButtonNode.getBoundingClientRect();

  clipButtonNode.dispatchEvent(new MouseEvent("mousedown", {
    bubbles: true,
    cancelable: true,
    screenX: clipButtonNodeClientRect.x,
    screenY: clipButtonNodeClientRect.y
  }));
}

for (var i = 0; i < document.querySelectorAll('.TbtXF').length; i++) {
	  console.log('fakeClick: ',i);
if(document.querySelectorAll('.TbtXF')[i].innerHTML.includes('start')==true){
toggleAttach(i)

}

	}const toggleAttach = (e) => {
  // select the span with reliable identification like data-*
  const clipNode = document.querySelectorAll('.TbtXF')[e];
  // take its element, i.e. the button itself
  const clipButtonNode = clipNode.parentNode;
  // extract the current offset position relative to the document
  // more info here https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect
  // we can use this for filling in the non-0 screenX and screenY
  const clipButtonNodeClientRect = clipButtonNode.getBoundingClientRect();

  clipButtonNode.dispatchEvent(new MouseEvent("mousedown", {
    bubbles: true,
    cancelable: true,
    screenX: clipButtonNodeClientRect.x,
    screenY: clipButtonNodeClientRect.y
  }));
}

for (var i = 0; i < document.querySelectorAll('.TbtXF').length; i++) {
	  console.log('fakeClick: ',i);
if(document.querySelectorAll('.TbtXF')[i].innerHTML.includes('start')==true){
toggleAttach(i)

}

	}


